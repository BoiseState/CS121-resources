*******************************************************************************
* Project: 1-Animated Marshmallow  
* Class:   CS 121 section 2
* Date:    September 23, 2014
* Name:    Sami Stoodent
*******************************************************************************

PROJECT OVERVIEW:

This Java application displays an animated marshmallow with features based on 
user input specifying sponginess, color, sugar density, and burn resistance.


INCLUDED FILES:

 * README - this file
 * Marshmallow.java - the main source code


BUILDING AND RUNNING:

All project files should be in the same directory.

From the directory containing the .java source code, compile the program:
    $ javac Marshmallow.java

Run the program from the directory containing Marshmallow.class:
    $ java Marshmallow

You will be prompted for integer values representing distance to the fire,
fire intensity, marshmallow burn resistance, and marshmallow sugar density.


PROJECT DESIGN:

The Marshmallow class extends the JPanel class, so it has all of the
properties and methods of a JPanel - this class basically just overwrites
the JPanel paintComponent() method and includes a Timer and ActionListener
to update and refresh the panel by periodically calling paintComponent() 
indirectly via the repaint() method. Because main() creates the JFrame and
an instance of Marshmallow, this class is self-contained and there is no 
separate driver class.

After JPanel, the classes that were the focal points of this program were
the Timer and Graphics classes.  The Timer code was given to us. Most of
the work for this program centered around the Graphics class and its many
draw and fill methods.

All graphic elements are drawn relative to a single anchor point for ease
of relocating as the canvas is resized. The marshmallow is centered in the
view and sized so that it occupies 50% of the lesser of the width and height.
Text output is also resized to ensure it fits within the view and doesn't
cover the marshmallow.

Each of the user input parameters uses a separate input dialog box. It
works, but it seems clunky. I think it would be better if there was one form
at the beginning with all the choices, but I'm not sure how to do something
like that yet.

I originally intended to make the animation refresh rate adjustable, but ran
out of time. The hardcoded refresh rate looks good on my local machine, but
it's too fast when viewing the animation over a remote connection, so this
feature would be a good addition to the project.


PROJECT DEVELOPMENT AND TESTING DISCUSSION:

When I realized my paintComponent() method was getting really long and hard to
read, I broke out each graphical element into its own private method.  The hard
part of that was figuring out that I needed to pass in the Graphics object to
each method, but it worked well after I did that. It also helped to read about
the Graphics class in the Java API, to learn how to use the different draw
methods.

I tested values from 0 to 20 for each of the input parameters, but I found that
values greater than 20 cause the program to freeze up. I don't know how to
restrict input values, yet, but that would be a good feature to add. I added
a warning to the input dialog, but there's nothing to stop users from adding
values over 20.

I tried running the program remotely over SSH with X, but my connection wasn't
fast enough to see the animation very well and there were several times the
dialog boxes for my input prompts showed up behind the main window. When I
came into the lab and ran it, however, everything looked good and worked just
like it did when I ran it locally on my own computer.

The starting file for the project had a window size of 200 x 500, but I found
that the text was too small to read unless the height was at least 300, so I
ended up with minimum dimensions of 300 x 500.  It looks best, though, even
bigger.  I recommend 400 x 600.

This project was challenging at first, but it was fun once I got the hang of
it and I feel like I learned a lot about graphics in Java.


EXTRA CREDIT:

I added the flame animation and screaming sound effect when the marshmallow
overheats. You can see it when sugar density is > 10 and burn resistance is
< 15.
